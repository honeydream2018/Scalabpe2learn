//$tlvtest.test_tlv1.with(AssertFlow)

import FlowHelper._
import org.jboss.netty.buffer._

//#receive

    assertEquals(1,Router.main.codecs.version(221))

    if( true ) {
        val m1 = HashMapStringAny( 
            "s"->"aaa", "i" -> 3, "bs1"->Array[Byte](1,2,3),
            "stuc1"-> HashMapStringAny( "f1"->"f1","f2"->"f2","f3"->3,"f4"->"4444"),
            "mm"->"123"  // 不存在的key
            )
        var tlvCodec = Router.main.codecs.findTlvCodec(221)
        val (buff1,ec1) = tlvCodec.encodeRequest(1,m1,1)
        assertEquals(0,ec1)
        buff1.readerIndex(0)
        val (m2,ec2) = tlvCodec.decodeRequest(1,buff1,1)
        assertEquals(0,ec2)
        assertEquals(4,m2.size)
        assertEquals("aaa",m2.v("s"))
        assertEquals(3,m2.v("i"))
        assertTrue(m2.v("stuc1").isInstanceOf[HashMapStringAny])
        assertEquals("f1",m2.m("stuc1").v("f1"))
        assertEquals("f2",m2.m("stuc1").v("f2"))
        assertEquals(3,m2.m("stuc1").v("f3"))
        assertEquals("4444",m2.m("stuc1").v("f4"))
        assertTrue(m2.v("bs1").isInstanceOf[Array[Byte]])
        assertEquals(3,m2.v("bs1").asInstanceOf[Array[Byte]](2))
    }

    if( true ) {
        val m1 = HashMapStringAny( 
            "s"->"aaa", "i" -> 3, "bs1"->Array[Byte](1,2,3),
            "stuc1"-> HashMapStringAny( "f1"->"f1","f2"->"f2","f3"->3,"f4"->"4444"),
            "mm"->"123"  // 不存在的key
            )
        var tlvCodec = Router.main.codecs.findTlvCodec(221)
        val (buff1,ec1) = tlvCodec.encodeResponse(1,m1,1)
        assertEquals(0,ec1)
        buff1.readerIndex(0)
        val (m2,ec2) = tlvCodec.decodeResponse(1,buff1,1)
        assertEquals(0,ec2)
        assertEquals(4,m2.size)
        assertEquals("aaa",m2.v("s"))
        assertEquals(3,m2.v("i"))
        assertTrue(m2.v("stuc1").isInstanceOf[HashMapStringAny])
        assertEquals("f1",m2.m("stuc1").v("f1"))
        assertEquals("f2",m2.m("stuc1").v("f2"))
        assertEquals(3,m2.m("stuc1").v("f3"))
        assertEquals("4444",m2.m("stuc1").v("f4"))
        assertTrue(m2.v("bs1").isInstanceOf[Array[Byte]])
        assertEquals(3,m2.v("bs1").asInstanceOf[Array[Byte]](2))
    }

    if( true ) {
        val m1 = HashMapStringAny( 
            "s"->"aaa", "i" -> 3, "bs1"->Array[Byte](1,2,3),
            "stuc1"-> HashMapStringAny( "f1"->"f1","f2"->"f2","f3"->3,"f4"->"4444"),
            "mm"->"123"  // 不存在的key
            )
        var tlvCodec = Router.main.codecs.findTlvCodec(221)
        val (m2,ec2) = tlvCodec.filterRequestInJvm(1,m1,false)
        assertEquals(0,ec2)
        assertEquals(4,m2.size)
        assertEquals("aaa",m2.v("s"))
        assertEquals(3,m2.v("i"))
        assertTrue(m2.v("stuc1").isInstanceOf[HashMapStringAny])
        assertEquals("f1",m2.m("stuc1").v("f1"))
        assertEquals("f2",m2.m("stuc1").v("f2"))
        assertEquals(3,m2.m("stuc1").v("f3"))
        assertEquals("4444",m2.m("stuc1").v("f4"))
        assertTrue(m2.v("bs1").isInstanceOf[Array[Byte]])
        assertEquals(3,m2.v("bs1").asInstanceOf[Array[Byte]](2))
    }

    if( true ) {
        val m1 = HashMapStringAny( 
            "s"->"aaa", "i" -> 3, "bs1"->Array[Byte](1,2,3),
            "stuc1"-> HashMapStringAny( "f1"->"f1","f2"->"f2","f3"->3,"f4"->"4444"),
            "mm"->"123"  // 不存在的key
            )
        var tlvCodec = Router.main.codecs.findTlvCodec(221)
        val (m2,ec2) = tlvCodec.filterResponseInJvm(1,m1)
        assertEquals(0,ec2)
        assertEquals(4,m2.size)
        assertEquals("aaa",m2.v("s"))
        assertEquals(3,m2.v("i"))
        assertTrue(m2.v("stuc1").isInstanceOf[HashMapStringAny])
        assertEquals("f1",m2.m("stuc1").v("f1"))
        assertEquals("f2",m2.m("stuc1").v("f2"))
        assertEquals(3,m2.m("stuc1").v("f3"))
        assertEquals("4444",m2.m("stuc1").v("f4"))
        assertTrue(m2.v("bs1").isInstanceOf[Array[Byte]])
        assertEquals(3,m2.v("bs1").asInstanceOf[Array[Byte]](2))
    }

    if( true ) {
        val m1 = HashMapStringAny( 
            "s2_array"->Array("123","456")
            )
        var tlvCodec = Router.main.codecs.findTlvCodec(221)
        val (buff1,ec1) = tlvCodec.encodeRequest(2,m1,1)
        assertEquals(0,ec1)
        buff1.readerIndex(0)
        val (m2,ec2) = tlvCodec.decodeRequest(2,buff1,1)
        assertEquals(0,ec2)
        assertEquals(1,m2.size)
        assertEquals("123",m2.nls("s2_array")(0))
        assertEquals("456",m2.nls("s2_array")(1))
    }

    reply(assert_result_code)

